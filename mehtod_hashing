var aHash = function(img) {
    var width = 25,
    height = 25,
    hash_padding = 3; // Pad resulting hash up to proper hash length

    var canvas = document.createElement('canvas'),
        ctx = canvas.getContext('2d');

    canvas.width = width;
    canvas.height = height;
    ctx.drawImage(img, 0, 0, width, height);
    var im = ctx.getImageData(0, 0, width, height);

    var num_channels = 4;
    var vals = new Float64Array(width * height);

    // Convert image to grayscale
    for(var i = 0; i < width; i++){
        for(var j = 0; j < height; j++){
            var base = num_channels * (width * j + i);
            if (im.data[base+3]  == 0) {
                vals[width * j + i] = 255;
                continue
            }
            vals[width * j + i] = 0.2126 * im.data[base] +
                0.7152 * im.data[base + 1] +
                0.0722 * im.data[base + 2];
        }
    }



    var pixel_sum = 0;
    for (var i = 0; i < vals.length; i++) {
        pixel_sum += vals[i];
    }
    var pixel_avg = pixel_sum / vals.length;

    var hash = '';

    // Add padding to start of hash:
    for (var i = 0; i < hash_padding; i++) {
        hash += 0;
    }

    for (var i = 0; i < width; i++) {
        for (var j = 0; j < height; j++) {
            var pixel = vals[width * j + i];
            hash += pixel < pixel_avg ? 1 : 0;
        }
    }
    // if (VERBOSE) {
    //   console.log(hash);
    // }
    // return hash;
};

// From https://gist.github.com/andrei-m/982927
const levenshtein = (a, b) => {
  if (a.length === 0) return b.length
  if (b.length === 0) return a.length
  let tmp, i, j, prev, val
  // swap to save some memory O(min(a,b)) instead of O(a)
  if (a.length > b.length) {
    tmp = a
    a = b
    b = tmp
  }

  row = Array(a.length + 1)
  // init the row
  for (i = 0; i <= a.length; i++) {
    row[i] = i
  }

  // fill in the rest
  for (i = 1; i <= b.length; i++) {
    prev = i
    for (j = 1; j <= a.length; j++) {
      if (b[i-1] === a[j-1]) {
        val = row[j-1] // match
      } else {
        val = Math.min(row[j-1] + 1, // substitution
              Math.min(prev + 1,     // insertion
                       row[j] + 1))  // deletion
      }
      row[j - 1] = prev
      prev = val
    }
    row[a.length] = prev
  }
  return row[a.length]
}

var distance = function(a, b) {
    var dist = 0;
    for(var i = 0; i < a.length; i++)
        if(a[i] != b[i]) dist++;
    return dist;
}

// Cache containing elements already identified as adchoices.
var adchoices_cache = {};


chrome.runtime.onMessage.addListener(
    function(request, sender, sendResponse) {

        if ("data" in request) {
            // if (VERBOSE) {
            //     console.log(request['data']);
            // }

            // Check to see if element is already in adchoices_cache.
            if (request['data'][1] in adchoices_cache) {
                if (adchoices_cache[request['data'][1]]) {
                    // if (VERBOSE) {
                    //     console.log('Using cache (adchoice found) ', request['data'][1]);
                    // }
                    sendResponse({element: request['data'][1]});
                    return;
                } else {
                    // if (VERBOSE) {
                    //     console.log("Using cache (adchoice not found) : ", request['data'][1]);
                    // }
                    sendResponse({no_element: "Inside!"});
                    return;
                }
            }

            var t0 = performance.now();
            var SIM_THRESHOLD = .8;
            var OCR_DIST_THRESHOLD = 4;
            var OCR_LEN_MIN_THRESHOLD = 5;
            var OCR_LEN_MAX_THRESHOLD = 17;
            var img = new Image();
            img.crossOrigin = 'CITPymous';
            img.element = request['data'][1];
            img.adchoice_samples = adchoices_hashes;
            img.ad_strings = ad_strings;
            img.t0 = t0;
            img.onload = function() {
                // If image is 1x1 pixel, skip.
                if (this.width <= 1 || this.height <= 1) {
                    adchoices_cache[this.element] = false;
                    this.callback({no_element: "Inside!"});
                    return true;
                }


                // Hash the image!
                var hash = aHash(this);

                // Compare hash to set of example adchoice icon hashes
                var found_element = false;
                for (var j = 0; j < this.adchoice_samples.length; j++) {
                    console.log(hexToBinary(this.adchoice_samples[j]).result);
                    console.log(hash);
                    var sim_score = 1 - distance(hash, hexToBinary(this.adchoice_samples[j]).result) / 628.0;
                    console.log(sim_score);
                    // if (VERBOSE) {
                    //     console.log("Sim score: " + sim_score);
                    // }

                    if (sim_score > SIM_THRESHOLD) {
                        found_element = true;
                        // if (VERBOSE) {
                        //   console.log('GOT IT!');
                        //   console.log(hash);
                        //   console.log(this.element);
                        //   console.log(sim_score);
                        //   console.log("performance : " + (performance.now() - img.t0));
                        // }
                        adchoices_cache[this.element] = true;
                        this.callback({element: this.element});
                        return;
                    }

                }
            }
        }
    })